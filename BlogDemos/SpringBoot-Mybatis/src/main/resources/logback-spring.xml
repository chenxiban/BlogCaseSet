<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true"> <!-- property自定义变量其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义 的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --> <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_NAME" value="/home"></property> <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder> <!--<pattern>%d %p (%file:%line\)- %m%n</pattern> --> <!--格式化输出：%d:表示日期 %thread:表示线程名 %-5level:级别从左显示5个字 符宽度 %msg:日志消息 %n:是换行符 -->
			<pattern>1-%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -
				%msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender> <!--<include resource="org/springframework/boot/logging/logback/base.xml"/> --> <!-- 设置上下文名称 -->
	<contextName>RestAPI</contextName>
	<property name="LOG_PATH" value=".logs" /> <!--设置系统日志目录 -->
	<property name="APPDIR" value="app" /> <!-- 日志记录器，日期滚动记录 -->
	<appender name="FILEERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender"> <!-- 正在记录的日志文件的路径及文件名 -->
		<file>D:/my2018log/log_error.log</file><!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节 点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目 
				录。 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指 定索引 -->
			<fileNamePattern>${LOG_PATH}/${APPDIR}/error/log-error-%d{yyyy-MM-
				dd}.%i.log</fileNamePattern> <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开 始， 命名日志文件，例如log-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy> <!-- 追加方式记录日志 -->
		<append>true</append> <!-- 日志文件的格式 -->
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L -
				%msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder> <!-- 此日志文件只记录error级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender> <!-- 日志记录器，日期滚动记录 -->
	<appender name="FILEWARN"
		class="ch.qos.logback.core.rolling.RollingFileAppender"> <!-- 正在记录的日志文件的路径及文件名 -->
		<file>${LOG_PATH}/${APPDIR}/log_warn.log</file> <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节 点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目 
				录。 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指 定索引 -->
			<fileNamePattern>${LOG_PATH}/${APPDIR}/warn/log-warn-%d{yyyy-MM-
				dd}.%i.log</fileNamePattern> <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开 始， 命名日志文件，例如log-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy> <!-- 追加方式记录日志 -->
		<append>true</append> <!-- 日志文件的格式 -->
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L -
				%msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder> <!-- 此日志文件只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender> <!-- 日志记录器，日期滚动记录 -->
	<appender name="FILEINFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender"> <!-- 正在记录的日志文件的路径及文件名 -->
		<file>${LOG_PATH}/${APPDIR}/log_info.log</file> <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节 点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目 
				录。 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指 定索引 -->
			<fileNamePattern>${LOG_PATH}/${APPDIR}/info/log-info-%d{yyyy-MM-
				dd}.%i.log</fileNamePattern> <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开 始， 命名日志文件，例如log-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>2MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy> <!-- 追加方式记录日志 -->
		<append>true</append> <!-- 日志文件的格式 -->
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>===%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L -
				%msg%n</pattern>
			<charset>utf-8</charset>
		</encoder> <!-- 此日志文件只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<appender name="CONSOLE"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L -
				%msg%n</pattern> <!--<charset>UTF-8</charset> -->
		</encoder>
	</appender> <!-- name指定Mybatis接口所在的包，开发模式控制台显示Mybatis的Sql执行细节 -->
	<logger name="org.spring.springboot.dao" level="debug" />
	<springProfile name="production">
		<root level="DEBUG"> <!--<appender-ref ref="FILEERROR"/> --> <!--<appender-ref ref="FILEWARN"/> --> <!--<appender-ref ref="FILEINFO"/> --> <!--<appender-ref ref="DBAPPENDER"/> -->
			<appender-ref ref="STDOUT" />
		</root>
	</springProfile>
	<springProfile name="dev">
		<root level="info">
			<appender-ref ref="FILEERROR" /> <!--<appender-ref ref="FILEWARN"/> --> <!--<appender-ref ref="FILEINFO"/> --> <!--<appender-ref ref="DBAPPENDER"/> -->
			<appender-ref ref="CONSOLE" />
		</root>
	</springProfile>
</configuration>